---
import {type CollectionEntry, getCollection} from "astro:content";
import Layout from "@layouts/Layout.astro";
import NewsletterList from "@components/NewsletterList.astro";
import {makeLinkSafe, compare} from "../../utils";
import Badge from "../../components/Badge.astro";
import {getImagePath} from "astro-opengraph-images";

type newsletterType = CollectionEntry<'newsletter'>;
const allNewsletter  = await getCollection("newsletter") as Array<newsletterType>;
const categories = new Set(allNewsletter.flatMap(n => n.data.categories).filter(c => typeof(c) == "string"));
const tags = new Set(allNewsletter.flatMap(n => n.data.tags).filter(t => typeof(t) == "string"));

const count = function(newsletters: Array<newsletterType>, dataName: ("categories" | "tags" | "authors"), item: any) {
    return newsletters.filter(n => (n.data[dataName] ?? []).indexOf(item) >= 0).length
}

const openGraphImageUrl = getImagePath({ url: Astro.url, site: Astro.site });
---

<Layout title="fintag - Newsletter Archiv">
    <Fragment slot="head">
        <!-- Open Graph -->
        <meta property="og:site_name" content="fintag" />
        <meta property="og:url" content={new URL(Astro.url.pathname, Astro.site) } />
        <meta property="og:logo" content="https://www.fintag.de/img/fintag_logo.svg" />
        <meta property="og:locale" content="de_de" />
        <meta property="og:type" content="Article" />
        <meta property="og:title" content="fintag - Newsletter" />
        <meta property="og:description" content="Hier finden Sie alle Newsletter der fintag" />
        <meta property="og:image" content={openGraphImageUrl} />

        <!-- Twitter -->
        <meta name="twitter:card" content="summary_large_image">
        <meta property="twitter:domain" content={Astro.site}>
        <meta property="twitter:url" content={new URL(Astro.url.pathname, Astro.site) }>
        <meta name="twitter:title" content="fintag - Newsletter">
        <meta name="twitter:description" content="Hier finden Sie alle Newsletter der fintag">
        <meta name="twitter:image" content={openGraphImageUrl}>

        <link
            rel="alternate"
            type="application/rss+xml"
            title="fintag Newsletter"
            href={new URL("/newsletter/rss.xml", Astro.site)}
        />
    </Fragment>

    <main class="px-4 ">
        <section class="lg:px-24 container mx-auto">
            <h1>Newsletter Archiv</h1>
            <div class="flex gap-2">
                <img class="self-start" src="/valid-rss-rogers.png" alt="valid rss" width="88" height="31" />
                <a class="bg-[#f26522] hover:opacity-50 cursor-pointer text-white p-0.5 rounded-md" href="/newsletter/rss.xml" title="RSS feed Ã¶ffnen">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="size-8">
                        <path fill-rule="evenodd" d="M3.75 4.5a.75.75 0 0 1 .75-.75h.75c8.284 0 15 6.716 15 15v.75a.75.75 0 0 1-.75.75h-.75a.75.75 0 0 1-.75-.75v-.75C18 11.708 12.292 6 5.25 6H4.5a.75.75 0 0 1-.75-.75V4.5Zm0 6.75a.75.75 0 0 1 .75-.75h.75a8.25 8.25 0 0 1 8.25 8.25v.75a.75.75 0 0 1-.75.75H12a.75.75 0 0 1-.75-.75v-.75a6 6 0 0 0-6-6H4.5a.75.75 0 0 1-.75-.75v-.75Zm0 7.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0Z" clip-rule="evenodd" />
                    </svg>
                </a>
            </div>
            <NewsletterList newsletters={allNewsletter} />
        </section>

        <section class="my-12 max-w-prose mx-auto">
            <h2 class="text-center">Kategorien</h2>
            <ul class="flex flex-wrap gap-x-1 gap-y-0.5 justify-center">
                <!-- map every category with amount of newsletter with that tag, sort by amount reverse, then by tag name -->
                {Array.from(categories)
                    .map(c => ({category: c, amount: count(allNewsletter, "categories", c)}))
                    .sort((p1, p2) => compare(p1.amount, p2.amount, true) || compare(p1.category, p2.category))
                    .map(({category, amount}) =>
                        <li>
                            <Badge href={`/categories/${makeLinkSafe(category)}/`}>
                                {category}
                                ({amount})
                            </Badge>
                        </li>)}
            </ul>
        </section>

        <section class="my-12 max-w-prose mx-auto">
            <h2 class="text-center">Tags</h2>
            <ul class="flex flex-wrap gap-x-1 gap-y-0.5 justify-center">
                <!-- map every tag with amount of newsletter with that tag, sort by amount reverse, then by tag name -->
                {Array.from(tags)
                    .map(t => ({tag: t, amount: count(allNewsletter, "tags", t)}))
                    .sort((p1, p2) => compare(p1.amount, p2.amount, true) || compare(p1.tag, p2.tag))
                    .map(({tag, amount}) =>
                        <li>
                            <Badge color="secondary" href={`/tags/${makeLinkSafe(tag)}/`}>
                                {tag}
                                ({amount})
                            </Badge>
                        </li>)}
            </ul>
        </section>
    </main>
</Layout>
